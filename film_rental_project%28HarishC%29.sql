-- 1.	What is the total revenue generated from all rentals in the database?
select sum(amount) total_revenue , count(rental_id) no_of_rentals 
from payment;


-- 2.	How many rentals were made in each month_name
select * from rental;
select MONTHNAME(rental_date)  month_name, COUNT(*) rental_count
from rental
group by  MONTHNAME(rental_date)
order  by month_name desc;


-- 3.	What is the rental rate of the film with the longest title in the database? (2 Marks)


select film_id,title,  
length(title) longest_title , rental_rate 
from film
group by 1 
order by longest_title desc limit 1;


-- 4.	What is the average rental rate for films that were taken from 
-- the last 30 days from the date("2005-05-05 22:04:30")? 

select 
avg(rental_rate) avg_rate
from
film f
join inventory i using (film_id)
join rental r using (inventory_id)
where r.rental_date >= DATE_SUB('2005-05-05 22:04:30', interval 30 DAY);

-- 5.What is the most popular category of films in terms of the number of rentals? (3 Marks)
select count(*) from film_category;

select category_id, name, count(rental_id) no_of_rentals from category
left join film_category using(category_id)
left join inventory using(film_id)
left join rental using(inventory_id)
group by 1 order by count(*) desc limit 1;

-- 6.	Find the longest movie duration from the 
--      list of films that have not been rented by any customer. (3 Marks)
select  title , max(f.length) as duraction
from film f
left join inventory i using(film_id)
left join rental r using(inventory_id)
where r.rental_id is null
group by 1
order by duraction desc limit 1;


-- 7.	What is the average rental rate for films, broken down by category? (3 Marks)

select c.name ,avg(f.rental_rate) avg_rental_rate
from category c
join film_category fc using(category_id)
join film f using(film_id)
group by 1
order by avg_rental_rate desc;

-- 8.What is the total revenue generated from rentals for each actor in the database? (3 Marks)
select 
actor_id , 
concat_ws(" ",first_name, last_name) full_name,
sum(p.amount) total_revenue
from actor a
join film_actor fa using(actor_id)
join film f using(film_id)
join inventory i using(film_id)
join rental r using(inventory_id)
join payment p using(rental_id)
group by 1,2
order by total_revenue desc;

-- 9.Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)

select 
actor_id , 
concat_ws(" ",first_name, last_name) full_name
from actor a
join film_actor fa using(actor_id)
join film f using(film_id)
where f.description like '%Wrestler%' ;

-- 10.Which customers have rented the same film more than once? (3 Marks)

select customer_id ,
concat_ws(' ',c.first_name, c.last_name) full_name,
f.title,
count(r.rental_id) no_of_times
from customer c
join rental r using(customer_id)
join inventory i using(inventory_id)
join film f on f.film_id = i.film_id
group by 1,2,3
having no_of_times >1
order by count(*) desc;

-- 11.How many films in the comedy category have a rental 
--    rate higher than the average rental rate? (3 Marks)

select 
name category_name , count(f.film_id) no_of_films,
group_concat(f.title) title
from category c
join film_category fc using(category_id)
join film f using(film_id)
where name = 'comedy' and f.rental_rate>(select avg(rental_rate) from film)
group by 1;




-- 12.Which films have been rented the most by customers living in each city? (3 Marks)

with temp as(
select 
c.city_id,
f.title rented,
row_number() over (partition by c.city_id order by count(r.rental_id) desc) ranking
from customer cu
join rental r using(customer_id)
join inventory i using(inventory_id)
join film f using(film_id)
join address a using(address_id)
join city c using(city_id)
group by 1,2)
select
ci.city,
t.rented
from city ci
join temp t using(city_id)
where t.ranking = 1;




-- 13.What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)

select sum(amount) from payment;

select 
p.customer_id,
concat(c.first_name, ' ', c.last_name) Customer_Name,
sum(p.amount) Total_amount_spent
from payment p
join customer c using (customer_id)
group by customer_id
having sum(amount) > 200
order by Total_amount_spent desc;

-- 14.	Display the fields which are having foreign key constraints 
--   related to the "rental" table. [Hint: using Information_schema] (2 Marks)
select 
constraint_name,
column_name,
referenced_table_name,
referenced_column_name
from 
information_schema.key_column_usage
where
table_name = 'rental' and
constraint_name <> 'primary';



-- 15.	Create a View for the total revenue generated by each staff member, 
-- broken down by store city with the country name. (4 Marks)

create view revenue as 
select 
s.staff_id ,
concat_ws(" ",s.first_name , s.last_name) Full_name,
c.city,
cu.country,
sum(p.amount) total_revenue
from staff s
join store st on s.store_id = st.store_id
join address a on a.address_id = st.address_id
join city c on a.city_id = c.city_id
join country cu on c.country_id = cu.country_id
join customer co on s.store_id = co.store_id
join rental r on co.customer_id = r.customer_id
join payment p on r.rental_id = p.rental_id  
group by 1,2,3,4;
select * from revenue;


-- 16.	Create a view based on rental information consisting of 
-- visiting_day, customer_name, the title of the film,  no_of_rental_days, the amount paid by the 
-- customer along with the percentage of customer spending. (4 Marks)

create  view  rental_info_view as
select
r.rental_id,r.rental_date visiting_day,
CONCAT(c.first_name, ' ', c.last_name) customer_name,
f.title film_title,DATEDIFF(r.return_date, r.rental_date) no_of_rental_days,p.amount amount_paid,
(p.amount / (select SUM(amount) from payment where customer_id = c.customer_id) * 100) spending_percentage
from rental r
join customer c on r.customer_id = c.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
left join payment p on r.rental_id = p.rental_id;
select * from rental_info_view;

-- 17.	Display the customers who paid 50% of their total rental costs within one day. (5 Marks)

select 
c.customer_id,
CONCAT(c.first_name, ' ', c.last_name)  customer_name,
f.film_id,
(f.rental_rate * f.rental_duration)  rental_cost,
p.amount,(p.amount / (f.rental_rate * f.rental_duration)) * 100 pct_paid
from film f
join inventory i using (film_id)
join rental r using (inventory_id)
join customer c using (customer_id)
join payment p using (rental_id)
where (p.amount / (f.rental_rate * f.rental_duration)) > 0.5 
		and payment_date < date_add(r.rental_date, interval 1 day);









